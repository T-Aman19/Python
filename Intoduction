{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNjcKsCEqA8+5rUtGk72gdB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/T-Aman19/Pyhton/blob/master/Intoduction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "02eszxLBpILJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "'''why learn python?\n",
        "1. Object oreiented\n",
        "2. Easy syntax\n",
        "3, Big community, so u can get solution to almost all of your doubts\n",
        "4. Used in data science and ML models\n",
        "\n",
        "Disadvantages of python:\n",
        "Slower in execution in comparision with other languages such as C++ and C.'''\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WbH5sM83p28o",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 55
        },
        "outputId": "11dcdab8-5878-4a6b-8afe-2594c1b104cf"
      },
      "source": [
        "'''Data types in python :\n",
        "int, string, float, list, dictionary, set, tuple.\n",
        "Int- valid for any integer\n",
        "Float- Decimal values\n",
        "String- Anything between \" \" or ' '.'''\n",
        "#Lines starting with # are comments in python\n",
        "'''This \n",
        "is \n",
        "a multiline comment. Infact, python does not have multiline comment, this is a multiline string, but unless printed or used anywhere, it acts as multilline comments.\n",
        "\n",
        "\n",
        "Python is case-sensitive\n",
        "'''\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'This \\nis \\na multiline comment. Infact, python does not have multiline comment, this is a multiline string, but unless printed or used anywhere, it acts as multilline comments.'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u2AnEciD2VuU",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "52d7e969-2a43-459d-9e0c-48c956a9547a"
      },
      "source": [
        "#List\n",
        "#indexing in list starts from 0\n",
        "#to declare a list we can use list(), it will create an empty list or we can also initialise the variable with [].\n",
        "#Example:\n",
        "a=list()\n",
        "print(\"a=\", a)\n",
        "#OR\n",
        "b=[]\n",
        "print(\"b=\", b)\n",
        "\n",
        "#List methods: Inbuilt operations which we can peform on lists\n",
        "#1.Append: Add a value at the end of the list\n",
        "a.append(2)\n",
        "print(\"a after appending 2=\", a)\n",
        "#2. clear:\tRemoves all the elements from the list\n",
        "a.clear()\n",
        "print(\"a after clearing=\", a)\n",
        "#To show other methods, first lets add a few values to our list\n",
        "b.append(1)\n",
        "b.append(2)\n",
        "b.append(5)\n",
        "b.append(0)\n",
        "print(\"updated b=\", b)\n",
        "#count: Returns the number of elements with the specified value\n",
        "print(b.count(2))\n",
        "#and if the value doesn't exist, it returns 0\n",
        "print(b.count(10))\n",
        "b.append(2)\n",
        "print(b)\n",
        "#index: returns the position at the first occurrence of the specified value.\n",
        "print(b.index(2))\n",
        "#b contains 2 at position 1 and 4, but index returns 1\n",
        "#insert: Adds an element at the specified position\n",
        "b.insert(0,10) # Inserts 10 at index 0\n",
        "print(b)\n",
        "#remove: Removes the first item with the specified value\n",
        "b.remove(2)#Removes 2 from its first occurence\n",
        "print(b)\n",
        "#pop: Removes the element at the specified position\n",
        "b.pop(2)#Deletes the element at 2 pos\n",
        "print(b)\n",
        "#revrse: Reverses the order of the list\n",
        "b.reverse()\n",
        "print(b)\n",
        "#sort: Sorts the list in ascending order\n",
        "b.sort()\n",
        "print(b)\n",
        "# To sort in descending order, set reverse to True\n",
        "b.sort(reverse=True)\n",
        "print(b)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "a= []\n",
            "b= []\n",
            "a after appending 2= [2]\n",
            "a after clearing= []\n",
            "updated b= [1, 2, 5, 0]\n",
            "1\n",
            "0\n",
            "[1, 2, 5, 0, 2]\n",
            "1\n",
            "[10, 1, 2, 5, 0, 2]\n",
            "[10, 1, 5, 0, 2]\n",
            "[10, 1, 0, 2]\n",
            "[2, 0, 1, 10]\n",
            "[0, 1, 2, 10]\n",
            "[10, 2, 1, 0]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lWfHLfPD2tg1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 164
        },
        "outputId": "a5136e7a-92bc-4911-c6b0-d578d303cbe2"
      },
      "source": [
        "#Dictionary\n",
        "#contains key-value pairs which are indexed and changeable\n",
        "#To declare a dictionary, we can use dict() method or initialise the variable with {}\n",
        "d= dict()\n",
        "print(d)\n",
        "#OR\n",
        "e={}\n",
        "print(e)\n",
        "\n",
        "#Values can be added manually as:\n",
        "d= {'First': 'John', 'Second' : 'Jack', 'Third':'Charlie'}\n",
        "print(d)\n",
        "#Dictionary methods\n",
        "#get: Returns the value of a specified key\n",
        "print(d.get('First'))\n",
        "#items: Returns a list containing a tuple for each key value pair\n",
        "d.items()\n",
        "#keys: Returns a list containing the dictionary's keys\n",
        "d.keys()\n",
        "#pop: Removes the element with the specified key\n",
        "d.pop('First')\n",
        "print(\"After popping up First:\",d)\n",
        "#update: Updates the dictionary with the specified key-value pairs\n",
        "d.update({'Fourth': 'Ani'})\n",
        "print(\"updated d=\", d)\n",
        "#values: Returns a list of all the values in the dictionary\n",
        "print(d.values())\n",
        "#setdefault: returns the value of the item with the specified key. If the key does not exist, insert the key, with the specified value\n",
        "print(d.setdefault('Fifth', 'Joey'))#setdefault(key, value_to_insert(used only if key does no exist) )\n",
        "#Prints Joey as Fifth does not exist in d"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{}\n",
            "{}\n",
            "{'First': 'John', 'Second': 'Jack', 'Third': 'Charlie'}\n",
            "John\n",
            "After popping up First: {'Second': 'Jack', 'Third': 'Charlie'}\n",
            "updated d= {'Second': 'Jack', 'Third': 'Charlie', 'Fourth': 'Ani'}\n",
            "dict_values(['Jack', 'Charlie', 'Ani'])\n",
            "Joey\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pFKlg9aB817V",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}